<script> код на js </script>.##
<script src="Пусть к JS файлу или сылка из интернета"> 
Внутреняя часть игнорируетя </script>.##
<script src='' async> </script> Не останавливается на недогруженом скрипте 
при обработке страницы, становится синхронным.##
<script src='' defer> </script> Если написано несколько скриптов подряд 
то если загрузится второй быстрйе первого то будет все равно исполняться первый 
после загрузки.##

===============================================================================

Вызов каждой команды отделяется ; ##
Коментарии однострочные //Текст ##
Коментарии ммногострочне /*Текст*/ ##

===============================================================================
"use strict"; включает новый стандарт ОСТОРОЖНО.##
===============================================================================

var название_переменной объявление переменной.##
РЕГИСТР БУКВ имеет значение.##
Имя может состоять из: букв, цифр, символов $ и _
Первый символ не должен быть цифрой.##
Констант нет.##
Одинарные и двойные кавычки эквивалентны.##
Целые и вещественые числа это одно и тоже.##
Специальное значение для переменной null означает ничего или неизсвестно.##
Специальное значенее для переменной undefined 
значит переменной неприсвоено никакого значения.##
Infinity бесконечность.##
-Infinity минус бесконечность.##
Значение NaN используется для обозначения математической ошибки.##
Значение NaN – единственное, которое не равно ничему, включая себя.##
Любая операция с NaN возвращает NaN.##
isNaN(n) преобразует аргумент к числу и возвращает true, 
если получилось NaN, и false – для любого другого значения.##
isFinite(n) преобразует аргумент к числу и возвращает true, 
если это не NaN/Infinity/-Infinity ##
Функция parseInt и ее аналог parseFloat преобразуют строку символ за символом, 
пока это возможно.##
Функция parseInt также позволяет указать систему счисления parseInt('FF', 16)##

-------------------------------------------------------------------------------
Оператор typeof возвращает тип аргумента.##
Синтаксис оператора: typeof x.##
Синтаксис функции: typeof(x).##
Результатом typeof является строка, содержащая тип.##

-------------------------------------------------------------------------------
String(value) переводит value в строковой тип.## 
Или альтернативный вариант можно сложить строку и value с помощью знака + 
и получить сложение строк.##

-------------------------------------------------------------------------------
Number(value) переводит value в численный тип.##
Или можно написать перед value знак +.## 

undefined	        NaN
null	            0
true / false	    1 / 0
Строка	          Пробельные символы по краям обрезаются. Далее, если остаётся 
пустая строка то 0, иначе из непустой строки "считывается" число, 
при ошибке результат NaN.##

-------------------------------------------------------------------------------
Boolean(value) переводит value в логический тип.##
Или можно перед value поставить знаки !!.##

undefined, null	  false
Числа	            Все true, кроме 0, NaN -- false.
Строки	          Все true, кроме пустой строки "" -- false
Объекты         	Всегда true

===============================================================================

ОПЕРАНД то к чему пременяется оператор.##
унарная операция это операция над 1 элементом.##
бинарная операция это опирация над 2 элементами.##
тренарная операция это операция над 3 элементами.##

===============================================================================

При сравнении разных типов они приводяться к числовому типу.##
Значения null и undefined равны == друг другу и не равны 
чему бы то ни было ещё.##
При преобразовании в число null становится 0, undefined становится NaN.##
Число 0, пустая строка "", null и undefined, а также NaN являются false, 
oстальные значения – true.##

=== равноли по значению и по типу.##
|| логиечское (или) при первой истине прерывается и возращает значение 
аргумента того же типа, если ложно проверяется до последнего аргемена 
и возращает его.##
&& логическое (и) при первой лжи прерывает и возращет значение аргумента того 
же типа, если истина проверяет дальше до поледнего аргумента и возращает его.##
!приводит аргумент к логическому типу и возвращает противоположное значение.##
Сравнение разных типов значить что аргументы приводятся к типу целочисленому.##

===============================================================================

i++ инкремент.##
i-- декремент.##
i++ постфиксная сначала возращает значение потом увеличивает.##
++i префиксная увеличивает значение и возращает.##

===============================================================================

МОДАЛЬНОЕ ОКНО при открытии которого пользователь не может что то делать 
на сайте пока не закроет окно.##

-------------------------------------------------------------------------------
alert("Текст") модальное окно которое показывает текст 
и имеет одну кнопку ОК.##

-------------------------------------------------------------------------------
prompt(title, default) модальное окно с заголовком title, 
полем для ввода текста, заполненным строкой по умолчанию default 
и кнопками OK/CANCEL.##
Вызов prompt возвращает то, что ввёл посетитель – строку 
или специальное значение null, если ввод отменён.##

-------------------------------------------------------------------------------
confirm(question) модальное окно с вопросом question 
с двумя кнопками: OK и CANCEL.##
Возврощает true при нажатии OK и false – при CANCEL.##

===============================================================================

if(условие){Блок кода} 
else{}

-------------------------------------------------------------------------------
условие ? значение1 : значение2

Проверяется условие, затем если оно верно – возвращается значение1, 
если неверно – значение2.##

-------------------------------------------------------------------------------
switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]

  case 'value2':  // if (x === 'value2')
    ...
    [break]

  default:
    ...
    [break]
}

Если break нет, то выполнение пойдёт ниже по следующим case, 
при этом остальные проверки игнорируются.##
Оператор switch предполагает строгое равенство === ##

-------------------------------------------------------------------------------
Повторение цикла называется ИНТЕРАЦИЯ.##

-------------------------------------------------------------------------------
while (условие) 
{тело цикла} 

Тело цикла будет исполняться пока условие истиино.##

-------------------------------------------------------------------------------
do {тело цикла} 
while (условие); 
Тело цикла выполняется один раз и дальше пока условие истино.##

-------------------------------------------------------------------------------
for (начало; условие; шаг) 
{тело цикла} 

Выполняется пока истино.## 
Шаг выполняется после тела на каждой итерации, но перед проверкой условия.##

-------------------------------------------------------------------------------
ВАЖНООООООО!!!!!!!!!
Блоки if/else, switch, for, while, do..while не влияют 
на область видимости переменных.##

-------------------------------------------------------------------------------
break выходит из ближайшего цикла.##
continue возращает в начало цикла.##

-------------------------------------------------------------------------------
Метка имеет вид ИМЯ: то какойму циклу переходит, break или continue ИМЯ 
то привстречи переходит к другой метке.##
Нельзя использовать break/continue справа от оператора „?“

===============================================================================

Функции в JavaScript являются значениями.## 
Их можно присваивать, передавать, создавать в любом месте кода.##

-------------------------------------------------------------------------------
Функция называется в спецификации языка Function Declaration.##

function название(параметры)
{
  тело функции 
  return возращает значение;
}

-------------------------------------------------------------------------------
Функция называется в спецификации языка Function Expression.## 

var f = function(параметры) {
  // тело функции
};

-------------------------------------------------------------------------------
new Function(params, code);

params Параметры функции через запятую в виде строки.##
code Код функции в виде строки.##

-------------------------------------------------------------------------------
var f = function sayHi(...) { /* тело функции */ };

Имя sayHi будет доступно только внутри функции.## 
Это имя предназначено для надёжного рекурсивного вызова функции, 
даже если она записана в другую переменную.##

-------------------------------------------------------------------------------
Основное отличие между ними: функции, объявленные как Function Declaration, 
создаются интерпретатором до выполнения кода.##
Function Declaration при use strict 
видны только внутри блока, в котором объявлены.##

-------------------------------------------------------------------------------
У функции может быть параметр функция.##
Функциональное выражение, которое не записывается в переменную, 
называют АНОНИМНОЙ функцией.##

-------------------------------------------------------------------------------
return может находиться в любом месте функции.## 
Когда до неё доходит управление – функция завершается 
и значение передается обратно.##
Вызовов return может быть и несколько.##
return может также использоваться без значения и возращает undefined.##
Функция без return считается возвращающей undefined.##

-------------------------------------------------------------------------------
Если параметр не передан при вызове – он считается равным undefined.##
параметры по умолчанию:
if (text === undefined) {
    text = 'текст не передан';
  }
text = text || 'текст не передан';

===============================================================================

js понимает 16-ричные числа.##

-------------------------------------------------------------------------------
3en n число нулей справа от 3  3e2 = 300
3e-n n число знаков почле запятой   3e-2 = 0.03

-------------------------------------------------------------------------------
Math.floor Округляет вниз.##
Math.ceil Округляет вверх.##
Math.round Округляет до ближайшего целого.##
num.toFixed(precision) округляет число num до точности precision 
и до ближайшего значения и возвращает результат в виде строки.##

-------------------------------------------------------------------------------
Тригонометрия:
Math.acos(x) Возвращает арккосинус x (в радианах).##
Math.asin(x) Возвращает арксинус x (в радианах).##
Math.atan(x) Возвращает арктангенс x (в радианах).##
Math.atan2(y, x) Возвращает угол до точки (y, x).## 
Math.sin(x) Вычисляет синус x (в радианах).##
Math.cos(x) Вычисляет косинус x (в радианах).##
Math.tan(x) Возвращает тангенс x (в радианах).##

-------------------------------------------------------------------------------
Math.sqrt(x) Возвращает квадратный корень из x.##
Math.log(x) Возвращает натуральный (по основанию e) логарифм x.##
Math.pow(x, exp) Возводит число в степень, возвращает x^exp, 
например Math.pow(2,3) = 8. Работает в том числе с дробными и 
отрицательными степенями, например: Math.pow(4, -1/2) = 0.5.##
Math.abs(x) Возвращает абсолютное значение числа.##
Math.exp(x) Возвращает ex, где e – основание натуральных логарифмов.##
Math.max(a, b, c...) Возвращает наибольший из списка аргументов.##
Math.min(a, b, c...) Возвращает наименьший из списка аргументов.##
Math.random() Возвращает псевдо-случайное число в интервале [0,1)  
то есть между 0(включительно) и 1(не включая). 
Генератор случайных чисел инициализуется текущим временем.##

-------------------------------------------------------------------------------
toLocaleString() alert( number.toLocaleString() ); 
// 123 456 789 Красивый вывод числа.##

===============================================================================

Для создания строк можно использовать как двойные так и одинарные кавычки.##
\b	    Backspace
\f	    Form feed
\n	    New line
\r	    Carriage return
\t	    Tab
\uNNNN	Символ в кодировке Юникод с шестнадцатеричным кодом `NNNN`. 
Например, `\u00A9` -- юникодное представление символа копирайт ©.##

-------------------------------------------------------------------------------
str.length длина строки.##
str.charAt(i) или str[i] вернет i символ.## 
toLowerCase() и toUpperCase() меняют регистр строки на нижний/верхний.##
Для поиска подстроки indexOf(подстрока[, начальная_позиция]) 
возвращает позицию, на которой находится подстрока или -1 учитывает регистр.##
slice(start [, end]) возвращает подстроку с позиции start до но не включая end. 
Принимает отрицательный аргумент берет элементы щитая с конца.##
Все строки имеют внутреннюю кодировку Юникод.##
String.fromCharCode(code) Возвращает символ по коду code.##
str.charCodeAt(pos) Возвращает код символа на позиции pos.##
trim обрезает пробелы с начала и конца строки.##

===============================================================================

ОБЪЕКТЫ КАК АССОЦИАТИВНЫЕ МАССИВЫ.##
Ассоциативный массив – структура данных, в которой можно хранить любые данные 
в формате ключ-значение.##
Если свойство не существует, то вернется специальное значение undefined.##
Порядок перебора соответствует порядку объявления для нечисловых ключей, 
а числовые – сортируются.##
В переменной, которой присвоен объект, хранится не сам объект, 
а «адрес его места в памяти», иными словами – «ссылка» на него.##
При копировании переменной с объектом – копируется эта ссылка, 
а объект по-прежнему остается в единственном экземпляре.##
Если переменная-объект скопирована или передана в функцию, 
то копируется именно эта ссылка, а объект остаётся один в памяти.##

-------------------------------------------------------------------------------
Объект можно заполнить значениями при создании, указав их в фигурных скобках: 
{ ключ1: значение1, ключ2: значение2, ... }. 
Такой синтаксис называется литеральным (англ. literal).##

-------------------------------------------------------------------------------
Проверить есть ли в объекте свойство с определенным ключом используют "in".##
Его синтаксис: "ключ_объекста" in объект, причем имя свойства – в виде строки
как правило, работает и просто сравнение if (obj.prop !== undefined)

for (var key in obj) {
  /* ... делать что-то с obj[key] ... */
} 

Последовательно переберёт свойства объекта obj, имя каждого свойства 
будет записано в key и вызвано тело цикла.##

-------------------------------------------------------------------------------
название_объекта = new Object(); пустой объект.##
название_объекта = {}; пустой объект.##

-------------------------------------------------------------------------------
название_объекта.ключ_значения = значение; 
В название_объекта добовляется ключ_значения которое имеет значение.##
название_объекта.["ключ_значения"] = значение; 
В название_объекта добовляется ключ_значения которое имеет значение.##

-------------------------------------------------------------------------------
название_объекта.ключ_значения получения заначения  ключ_значения.##
название_объекта.["ключ_значения"] получения заначения  ключ_значения.##

-------------------------------------------------------------------------------
delete название_объекта.ключ_значения удаления ключа со занчениием.##
delete название_объекта.["ключ_значения"] удаления ключа со занчениием.##

===============================================================================
МАССИВЫ С ЧИСЛОВЫМИ ИНДЕКСАМИ.##
В массиве может храниться любое число элементов любого типа.##

-------------------------------------------------------------------------------
var название_массива = []; создает пустой массив.##
var arr = new Array(знчения массива через запятую); ##
Чтобы получить нужный элемент из массива указывается его номер 
в квадратных скобках название_массива[номер_объекта_от_нуля] ##

-------------------------------------------------------------------------------
length длина массива. Если её уменьшить вручную, то массив укоротится 
arr.length = 2; // укоротить до 2 элементов. Если length больше 
реального количества элементов, то отсутствующие элементы равны undefined.## 
pop() Удаляет последний элемент из массива и возвращает его.##
push(значение) Добавляет элемент в конец массива, 
могут добавлять сразу по несколько элементов.##
shift() Удаляет из массива первый элемент и возвращает его.##
unshift(значение) Добавляет элемент в начало массива, 
могут добавлять сразу по несколько элементов.##

-------------------------------------------------------------------------------
split(s, n) позволяет превратить строку в массив, разбив ее по разделителю s. 
Второй необязательный аргумент – n кол-во элементов которые надо считать.##
join(str) склеивает массив в строку, используя str как разделитель.##
delete удаляет пару «ключ-значение». Обычно же при удалении из массива мы хотим 
чтобы оставшиеся элементы сдвинулись и заполнили образовавшийся промежуток.##
splice(index[, deleteCount, elem1, ..., elemN]); Удалить deleteCount элементов, 
начиная с номера index, а затем вставить elem1, ..., elemN на их место. 
Возвращает массив из удалённых элементов.##
slice([begin, end]) копирует участок массива от begin до end, не включая end. 
Исходный массив при этом не меняется. Отрицательные индексы 
отсчитываются с конца.##
reverse() меняет порядок элементов в массиве на обратный.##
arr.concat(value1, value2, … valueN) создаёт новый массив, в который копируются 
элементы из arr, а также value1, value2, ... valueN. 
Если аргумент concat – массив, то concat добавляет элементы из него.##

-------------------------------------------------------------------------------
Двумерный массив:
var matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
alert( matrix[1][1] )
